#!/usr/bin/env python
import argparse, os
import gwide.methods as gtm
from gwide.Classes.tRNAFromConcatv2 import *

""" Script working with concat file generated by pileupsToConcat.py script. Read concat file and according to options.
Can plot intron, and peaks found by pypeaks script."""

def tRNA():
    usage = "Usage: UNDER CONSTRUCTION - not all functions are available. To create concat file run novo2concat"
    parser = argparse.ArgumentParser(usage=usage)

    files = parser.add_argument_group('Options for input files')
    files.add_argument("-g", "--gtf_file", dest="gtf_file", help="Provide the path to your gtf file.",
                     type=str, default=None)
    files.add_argument("-i", "--input_file", dest="input_file", help="Provide the path to your concat file. REQUIRED.",
                     metavar="FILE", default=None, required=True)
    files.add_argument("--5flank", dest="five_prime_flank", type=int, help="Set up 5 prime flank in pileup file. Default = 250", default=250)
    files.add_argument("--3flank", dest="three_prime_flank", type=int, help="Set up 3 prime flank in pileup file. Default = 250", default=250)

    universal = parser.add_argument_group('Universal options')
    universal.add_argument("-t", "--hits_threshold", dest="hits_threshold", type=int, help="Set up threshold for pileup. Default 0 reads",
                      default=0)
    universal.add_argument("-r", "--readthrough", dest="readthrough", type=int, help="Set up when readthrough starts. Default: 15",
                      default=15)
    universal.add_argument("-n", "--normalized", dest="normalized", action="store_true", help="Use when you want to work on data normalized 'reads per Milion'. Default: False", default=False)

    output = parser.add_argument_group('Options for output files')
    output.add_argument("-p", "--prefix", dest="out_prefix", type=str, help="Prefix for output files. Default to standard output. Not supported for -o ratio.", default=None)
    output.add_argument("-d", "--details", dest="details", action="store_true", help="Print details in text file. WARNING: works only with one experiment.", default=False)
    output.add_argument("-o", dest="output_files", choices=["fig", "fig_std", "fig_tight", "fig_ratio", "fig_boxes", "nuc3", "nuc5", "nuc_gene", "nuc_energy", "termination_valleys", "termination", "termination_text", "stat_text", "both"], help="Select from following options:"
                        "(1) fig - plot tRNA genes coverage; (2) figstd - plot gene after gene; (3) fig_tight; (4) fig_ratio - log2 for -a divided by -b, uses normalized data"
                        "(5) fig_boxes - mark A and B boxes (provide path to boxes position file)"
                        "(6) nuc3 - for nucleotide 3' end resolution; (7) nuc_gene - for nucleotide resolution of gene only"
                        "(8) nuc_energy - plots 3' end under nucleotide resolution with energy plots"
                        "(9) termination_valleys - for each valley calculate termination efficiency"
                        "(10) termination - calculate termination efficiency for last 20 nt"
                        "(11) termination_text - calculate termination efficiency for first 20 nt of 3' end and print text file"
                        "(12) stat_text - tab-deliminated; (13) both - fig and stat_text; (14) - nuc5 - for nucleotide 5' end resolution", default="both")
    output.add_argument("--peaks", dest="print_peaks", action="store_true", help="print peaks on plots. Default: False", default=False)
    output.add_argument("--valleys", dest="print_valleys", action="store_true", help="print valleys on plots. Default: False", default=False)
    output.add_argument("--mark", dest="mark", choices=["A","T","C","G"], help="mark nucleotide on plots. Default: None", default=None)

    special = parser.add_argument_group('Special options for some -o choices')
    special.add_argument("--lookahead", dest="lookahead", type=int, help="Set up lookahead parameter for pypeaks function. Default = 20", default=20)
    special.add_argument("-w", "--window", dest="window", type=int, help="Set up size of window for energy calculation (-o nuc_energy). Default: 5",
                      default=5)
    special.add_argument("--ntotal", dest="ntotal", action="store_true", help="Normalize data to sum of all reads (sum = 1). Default: False", default=False)
    special.add_argument("--nmax", dest="nmax", action="store_true", help="Normalize data to maximal value (max = 1). Default: False", default=False)
    special.add_argument("-a", dest="to_divide", type=str, help="experiment to divide by -b (-o fig_ratio)",
                      default=None)
    special.add_argument("-b", dest="divisor", type=str, help="experiment being divisor for -a (-o fig_ratio)",
                      default=None)
    special.add_argument("--abox", dest="abox_file", help="Provide the path to your tab file with A box start.",
                     metavar="FILE", default=None)
    special.add_argument("--bbox", dest="bbox_file", help="Provide the path to your tab file with B box start.",
                     metavar="FILE", default=None)
    options = parser.parse_args()

    #checking input
    input_file = options.input_file
    if options.output_files == 'fig_boxes' and ( options.abox_file == None or options.bbox_file == None ):
        exit('Please provide path to both box.tab files using options --abox and --bbox.')
    if options.output_files == 'fig_ratio' and ( options.to_divide == None or options.divisor == None ):
        exit('Please provide experiments names using options -a and -b.')

    #preparing naming of output files
    if options.out_prefix:
        prefix = options.out_prefix+'_'
        filename = options.out_prefix+'_rt'+str(options.readthrough)+'_l'+str(options.lookahead)+'_t'+str(options.hits_threshold)+'.list'
    else:
        prefix = str()
        filename = 'rt'+str(options.readthrough)+'_l'+str(options.lookahead)+'_t'+str(options.hits_threshold)+'.list'
    if options.print_peaks == True:
        prefix = prefix+'peaks_'
    if options.print_valleys == True:
        prefix = prefix+'valleys_'
    if options.normalized == True:
        prefix = 'normalized_'+prefix

    #setting up dependencies
    if options.output_files == "fig_ratio":
        options.normalized = True
    if options.output_files == 'termination_valleys':
        options.print_peaks = True
        options.print_valleys = True

    data = tRNAFromConcatv2(gtf_file=gtm.getGTF(options.gtf_file), five_prime_flank=options.five_prime_flank, print_valleys=options.print_valleys, print_peaks=options.print_peaks, readthrough_start=options.readthrough,
                             three_prime_flank=options.three_prime_flank, hits_threshold=options.hits_threshold, lookahead=options.lookahead, prefix=prefix, normalized=options.normalized)

    #reading csv file
    if options.output_files != "fig_ratio":
        data.read_csv(input_file, null_substitution=False)
    # elif options.output_files == "fig_ratio":
    #     data.read_csv(input_file, null_substitution=True) ## makes all 0 as 1 in hittable

    #finding peaks
    if (options.print_peaks == True or options.print_valleys == True ) and options.output_files != "fig_ratio":
        data.find_peaks()

    #calculating readthrough, details, normalize
    if options.output_files != "fig_ratio":
        data.calculate(details=options.details, ntotal=options.ntotal, nmax=options.nmax)
    elif options.output_files == "fig_ratio":
        data.calculate(details=options.details, ntotal=options.ntotal, nmax=options.nmax, pscounts=True)

    #making text files
    if options.output_files == "stat_text" or options.output_files == "both":
        text_file = open(filename, "w")
        data.make_text_file(text_file, details=options.details, ntotal=options.ntotal, nmax=options.nmax)

    if options.output_files == "fig" or options.output_files == "both":
        data.slice_dataframe()
        data.fig_gene_pp()

    if options.output_files == "fig_tight":
        data.slice_dataframe()
        data.fig_gene_pp_tight()

    #marks all T on the plots
    if options.output_files == "markT":
        data.slice_dataframe()
        data.mark_T()

    #marks all T and CG on the plots
    if options.output_files == "markTCG":
        data.slice_dataframe()
        data.mark_T(anti_plot=True)

    if options.output_files == "fig_ratio":
        data.slice_dataframe()
        data.fig_ratio(options.to_divide, options.divisor)

    if options.output_files == "nuc3":
        data.fig_3end_nucleotide_resolution()

    if options.output_files == "nuc5":
        data.fig_5end_nucleotide_resolution()

    if options.output_files == "nuc_gene":
        print 'Needs update. Talk to Tomasz.'
    #     data.fig_nucleotide_gene()

    # if options.output_files == "nuc_energy":
    #     data.fig_energy(options.window)

    if options.output_files == "fig_std":
        data.slice_dataframe()
        data.fig_gene_after_gene()

    if options.output_files == "fig_boxes":
        print 'Needs update. Talk to Tomasz.'
        data.slice_dataframe()
    #     data.fig_boxes(open(options.abox_file), open(options.bbox_file))
    #
    if options.output_files == "termination_valleys":
        print 'Needs update. Talk to Tomasz.'
        data.slice_dataframe()
    #     data.termination_efficency_valleys()
    #
    if options.output_files == "termination":
        print 'Needs update. Talk to Tomasz.'
        data.slice_dataframe()
    #     data.termination_efficency()

    if options.output_files == "termination_text":
        data.calculate_dG()
        text_file = open(filename, "w")
        data.make_text_file(text_file, print_dG=True)

    print '# Done.'

