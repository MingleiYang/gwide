#!/usr/bin/env python
__author__ = 'Tomasz Turowski'
__copyright__	= "Copyright 2015"
__version__		= "1.0"
__credits__		= ["Tomasz Turowski"]
__email__		= "twturowski@gmail.com"
__status__		= "Production"

import argparse
from argparse import RawTextHelpFormatter
import os

from gwide.gwideToolkit.DefineTerminatorClass import *


""" Script working with concat file generated by pileupsToConcat.py script. Read concat file and according to options.
Can plot intron, and peaks found by pypeaks script."""

usage = "Usage: UNDER CONSTRUCTION - not all functions are available. To run create pileups with pyPileup (pyCRAC package) then in directory containing pileup files type run i.e.:"+"\n"+ \
        "defineTerminator.py -c file.concat"

parser = argparse.ArgumentParser(usage=usage, formatter_class=RawTextHelpFormatter)
files = parser.add_argument_group('Options for input files')
files.add_argument("-g", "--gtf_file", dest="gtf_file", help="Provide the path to your gtf file.",
                 type=str, default=None)
files.add_argument("-c", "--concat_file", dest="concat_file", help="Provide the path to your concat file. Required.",
                 metavar="FILE", default=None, required=True)
files.add_argument("--abox", dest="abox_file", help="Provide the path to your tab file with A box start.",
                 metavar="FILE", default=None)
files.add_argument("--bbox", dest="bbox_file", help="Provide the path to your tab file with B box start.",
                 metavar="FILE", default=None)
files.add_argument("--5flank", dest="five_prime_flank", type=int, help="Set up 5 prime flank in pileup file. Default = 250", default=250)
files.add_argument("--3flank", dest="three_prime_flank", type=int, help="Set up 3 prime flank in pileup file. Default = 250", default=250)
peaks = parser.add_argument_group('Option for peaks finder (pypeaks')
peaks.add_argument("--lookahead", dest="lookahead", type=int, help="Set up lookahead parameter for pypeaks function. Default = 20", default=20)
universal = parser.add_argument_group('Universal options')
universal.add_argument("-t", "--hits_threshold", dest="hits_threshold", type=int, help="Set up threshold for pileup. Default 100 reads",
                  default=0)
universal.add_argument("-r", "--readthrough", dest="readthrough", type=int, help="Set up when readthrough should start countin. Default: 15",
                  default=15)
universal.add_argument("-n", "--normalized", dest="normalized", action="store_true", help="Use when you want to work on data normalized 'reads per Milion'. Default: False", default=False)
output = parser.add_argument_group('Options for output files')
output.add_argument("-p", "--prefix", dest="out_prefix", type=str, help="Prefix for output files. Default to standard output. Not supported for -o ratio.", default=None)
output.add_argument("-d", "--details", dest="details", action="store_true", help="Print (many) details in text file. WARNING: works only with one experiment.", default=False)
output.add_argument("-o", "--output", dest="output_files", choices=["text", "fig", "Trich", "findTerminators", "firstTerminator"], help="Select from following options:"+'\n\n'
                   "text - only text, tab-deliminated;"+'\n'
                   "figstd - only plots, gene after gene "+'\n'
                   "Trich - calculate R richness within last 9 nt for each position"+'\n'
                   "findTerminator - looking for different terminators",default="Trich")
output.add_argument("--peaks", dest="print_peaks", action="store_true", help="print peaks on plots. Default: False",
                  default=False)
output.add_argument("--valleys", dest="print_valleys", action="store_true", help="print valleys on plots. Works only with -o figstd. Default: False",
                  default=False)
special = parser.add_argument_group('Special options for some -o choices')
special.add_argument("-w", "--window", dest="window", type=int, help="Set up size of window for energy calculation (-o energy). Default: 5",
                  default=5)
special.add_argument("--ntotal", dest="ntotal", action="store_true", help="Normalize to sum of all reads (sum = 1). Default: False", default=False)
special.add_argument("--nmax", dest="nmax", action="store_true", help="Normalize to maximal value (max = 1). Default: False", default=False)
special.add_argument("-a", dest="to_divide", type=str, help="experiment to divide by -b (-o ratio)",
                  default=None)
special.add_argument("-b", dest="divisor", type=str, help="experiment being divisor for -a (-o ratio)",
                  default=None)
options = parser.parse_args()

if not options.gtf_file:
    if not os.environ['GTF_PATH']:
        print "# Provide GTF file."
        exit()
    else:
        gtf_file = os.environ['GTF_PATH']
else:
    gtf_file = options.gtf_file

#checking input files
concat_file = options.concat_file
if options.output_files == 'boxes' and ( options.abox_file == None or options.bbox_file == None ):
    print 'Please provide path to both box.tab files using options --abox and --bbox.'
    exit()

#preparing naming of output files
if options.out_prefix:
    prefix = options.out_prefix+'_'
    filename = options.out_prefix+'_rt'+str(options.readthrough)+'_l'+str(options.lookahead)+'_t'+str(options.hits_threshold)+'.list'
else:
    prefix = str()
    filename = 'rt'+str(options.readthrough)+'_l'+str(options.lookahead)+'_t'+str(options.hits_threshold)+'.list'
if options.print_peaks == True:
    prefix = prefix+'peaks_'
if options.print_valleys == True:
    prefix = prefix+'valleys_'
if options.normalized == True:
    prefix = 'normalized_'+prefix


#setting up dependencies
if options.output_files == "ratio":
    options.normalized = True
if options.output_files == 'termination_valleys':
    options.print_peaks = True
    options.print_valleys = True

data = DefineTerminatorClass(gtf_file=gtf_file, five_prime_flank=options.five_prime_flank, print_valleys=options.print_valleys, print_peaks=options.print_peaks, readthrough_start=options.readthrough,
                         three_prime_flank=options.three_prime_flank, hits_threshold=options.hits_threshold, lookahead=options.lookahead, prefix=prefix, normalized=options.normalized)

#reading csv file
if options.output_files != "ratio":
    data.read_csv(concat_file, null_substitution=False)
elif options.output_files == "ratio":
    data.read_csv(concat_file, null_substitution=True) ## makes all 0 as 1 in hittable
#finding peaks
if (options.print_peaks == True or options.print_valleys == True) and options.output_files != "ratio":
    data.find_peaks()
#calculating readthrough, details, normalize
data.calculate(details=options.details, ntotal=options.ntotal, nmax=options.nmax)

#making text files
if options.output_files == "text" or options.output_files == "both":
    text_file = open(filename, "w")
    data.make_text_file(text_file, details=options.details, ntotal=options.ntotal, nmax=options.nmax)

if options.output_files == "fig" or options.output_files == "both":
    data.slice_dataframe()
    data.fig_gene_pp()

#plot T richness on the plots
if options.output_files == "Trich":
    data.calculate_T_richness()
    data.slice_dataframe()
    data.fig_Trichness()

if options.output_files == "findTerminators":
    data.find_terminators()

if options.output_files == "firstTerminator":
    data.first_terminator()

print '# Done.'

