#!/usr/bin/env python
__author__ = 'Tomasz Turowski'
__copyright__	= "Copyright 2015"
__version__		= "0.2"
__credits__		= ["Tomasz Turowski"]
__email__		= "twturowski@gmail.com"
__status__		= "Production"

from optparse import OptionParser
import select

from gwide.gwideToolkit.rRNAFromConcat import *


""" Script working with concat file generated by pileupsToConcat.py script. Can work on stdin from that script. Read concat file and according to options.
    Print rRNA genes in order of experiments (3 per page)"""

def main():
    usage = "Usage: create pileups with pyPileup (pyCRAC package) then in directory containing pileup files type run i.e.:"+"\n"+ \
            "cat file.concat | analyse_rRNA_from_concat.py or analyse_rRNA_from_concat.py -c file.concat"
    parser = OptionParser(usage=usage)
    parser.add_option("-g", "--gtf_file", dest="gtf_file", help="Provide the path to your gtf file.",
                     metavar="FILE", default=None)
    parser.add_option("-c", "--concat_file", dest="concat_file", help="Provide the path to your concat file.",
                     metavar="FILE", default=None)
    parser.add_option("--5flank", dest="five_prime_flank", type="int", help="Set up 5 prime flank in pileup file. Default = 250", default=1000)
    parser.add_option("--3flank", dest="three_prime_flank", type="int", help="Set up 3 prime flank in pileup file. Default = 250", default=1000)
    parser.add_option("-l", "--lookahead", dest="lookahead", type="int", help="Set up lookahead parameter for pypeaks function. Default = 20", default=20)
    parser.add_option("-t", "--hits_threshold", dest="hits_threshold", type="int", help="Set up threshold for pileup. Default 100 reads",
                      default=100)
    # parser.add_option("-r", "--readthrough", dest="readthrough", type="int", help="Set up when readthrough should start countin. Default: 0",
    #                   default=0)
    parser.add_option("-p", "--prefix", dest="out_prefix", type="str", help="Prefix for output files. Default to standard output", default=None)
    parser.add_option("--peaks", dest="print_peaks", action="store_true", help="Add into command line if you want to print peaks on plots. Default: False",
                      default=False)
    parser.add_option("-o", "--output", dest="output_files", choices=["std", "ratio"], help="Select from following options:"+'\n'
                                                                                                   "std - RDN37-1; experiment after experimen ;"+'\n'
                                                                                                   "ratio - ratio for -a divided by -b",default="std")
    parser.add_option("-a", dest="to_divide", type="str", help="experiment to divide by -b", default=None)
    parser.add_option("-b", dest="divisor", type="str", help="experiment being divisor for -a", default=None)
    parser.add_option("-n", "--normalized", dest="normalized", action="store_true", help="Use when you want to work on data normalized reads per Milion? Default: False", default=False)
    (options, args) = parser.parse_args()

    if not select.select([sys.stdin,],[],[],0.0)[0] and not options.concat_file: #expression from stackoverflow to check if there are data in standard input
        print usage
        print 'For more details use -h option.'
        exit()
    if options.concat_file:
        concat_file = open(options.concat_file)
    else:
        concat_file = sys.stdin

    if options.gtf_file:
        gtf_file = options.gtf_file
    else:
        try:
            gtf_file = '/home/tturowski/seq_references/Saccharomyces_cerevisiae.EF4.74.shortChNames.sort.gtf'
        except:
            print "ERROR: Opening /home/tturowski/seq_references/Saccharomyces_cerevisiae.EF4.74.shortChNames.sort.gtf failed." \
                  "Provide path to your file using -g option."
            exit()

    if options.out_prefix:
        prefix = options.out_prefix+'_'
    else:
        prefix = str()

    if options.output_files == "ratio":
        options.normalized = True

    data = rRNAFromConcat(gtf_file=gtf_file, five_prime_flank=options.five_prime_flank, print_peaks=options.print_peaks,
                             three_prime_flank=options.three_prime_flank, hits_threshold=options.hits_threshold, lookahead=options.lookahead, prefix=prefix, normalized=options.normalized)
    if options.output_files != "ratio":
        data.read_concat_file(concat_file, null_substitution=False)
    elif options.output_files == "ratio":
        data.read_concat_file(concat_file, null_substitution=True) ## makes all 0 as 1 in hittable
    data.slice_data()
    if options.print_peaks == True:
        data.find_peaks()
    if options.output_files == "std":
        data.print_rRNA()   # RDN37 should be prepared with 1000 nt flanks
    if options.output_files == "ratio":
        # data.fig_ratio(options.to_divide, options.divisor)  # plots ratio to_divide/divisor
        data.fig_log2ratio(options.to_divide, options.divisor)  # plots log2 ratio to_divide/divisor
    print '# Done.'
main()
